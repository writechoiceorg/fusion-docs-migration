{
  "type": "object",
  "title": "Machine Learning",
  "description": "Invokes a machine learning model to make a prediction on a document during indexing.",
  "required": [
    "modelId",
    "storeInContext",
    "inputScript"
  ],
  "properties": {
    "skip": {
      "type": "boolean",
      "title": "Skip This Stage",
      "description": "Set to true to skip this stage.",
      "default": false,
      "hints": [
        "advanced"
      ]
    },
    "label": {
      "type": "string",
      "title": "Label",
      "description": "A unique label for this stage.",
      "hints": [
        "advanced"
      ],
      "maxLength": 255
    },
    "condition": {
      "type": "string",
      "title": "Condition",
      "description": "Define a conditional script that must result in true or false. This can be used to determine if the stage should process or not.",
      "hints": [
        "code",
        "code/javascript",
        "advanced"
      ]
    },
    "modelId": {
      "type": "string",
      "title": "Model ID",
      "description": "Model ID"
    },
    "storeInContext": {
      "type": "boolean",
      "title": "Store In Context",
      "description": "Flag to indicate if the result should be stored in Context rather than in pipeline Document. If this is set, the Context Key field should be populated.",
      "default": false
    },
    "contextKey": {
      "type": "string",
      "title": "Name of context key to store prediction",
      "description": "Name of context key to store prediction"
    },
    "failOnError": {
      "type": "boolean",
      "title": "Fail on Error",
      "description": "Flag to indicate if this stage should throw an exception if an error occurs while generating a prediction for a document.",
      "default": false
    },
    "inputScript": {
      "type": "string",
      "title": "Model input transformation script",
      "description": "Javascript code that returns a HashMap contains fields and values to send to ML model service.  Refer to examples.",
      "default": "/*\n\nThis script must construct a HashMap containing fields and values to be sent to the ML model service.\nThe field names and values will depend on the input schema of the model.\nGenerally, you'll be reading fields and values from the request/context/response and placing them into a HashMap.\n\nValue types supported are:\n- String\n- Double\n- String[]\n- double[]\n- List<String>\n- List<Number>\n\nThis script receives these objects and can be referenced in your script:\n- request\n- response\n- context\n- log (Logger useful for debugging)\n\nThe last line of the script must be a reference to the HashMap object you created.\n\nExample 1: Single pipeline doc's field value to modelInput HashMap\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"input_1\", doc.getFirstFieldValue(\"my_field\"))\nmodelInput\n\nExample 2: List of strings from pipeline doc's field to modelInput HashMap\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"input_1\", doc.getFieldValues(\"my_field\")) // doc.getValues returns a Collection\nmodelInput\n\nExample 3: List of numeric values from the pipeline doc's fields to modelInput HashMap\nvar modelInput = new java.util.HashMap()\nvar list = new java.util.ArrayList()\nlist.add(Double.parseDouble(doc.getFirstFieldValue(\"numeric_field_1\")))\nlist.add(Double.parseDouble(doc.getFirstFieldValue(\"numeric_field_2\")))\nmodelInput.put(\"input_1\", list)\nmodelInput\n\nExample 4: If you have created the model using Fusion ML Spark jobs, then use the following code\nvar modelInput = new java.util.HashMap()\nmodelInput.put(\"concatField\", doc.getFieldValues(\"my_field\"))\nmodelInput\n\n*/\n",
      "hints": [
        "lengthy",
        "code",
        "code/javascript"
      ]
    },
    "outputScript": {
      "type": "string",
      "title": "Model output transformation script",
      "description": "Javascript code that receives output from ML service as a HashMap called \"modelOutput\".  Most of the time this is used to place prediction results in the request or context.  Refer to examples.",
      "default": "/*\n\nThis output script receives the output prediction from the ML model service as a HashMap called \"modelOutput\".\nMost of the time this is used to place prediction results in the request or context for downstream pipeline stages\nto consume.\n\nThis script receives these objects and can be referenced in your script:\n- modelOutput (a HashMap containing fields/values returned from ML model service)\n- doc\n- context\n- log (Logger useful for debugging)\n\nExample: Add predictedLabel (string) into pipeline doc as a field\ndoc.addField(\"sentiment\", modelOutput.get(\"predictedLabel\"))\n\n*/\n",
      "hints": [
        "lengthy",
        "code",
        "code/javascript"
      ]
    },
    "storePredictedFields": {
      "type": "boolean",
      "title": "Store predicted fields",
      "description": "Store any predictions as predicted_[predicted_field] in the response.",
      "default": true
    }
  },
  "category": "Advanced",
  "categoryPriority": 3,
  "unsafe": false
}
