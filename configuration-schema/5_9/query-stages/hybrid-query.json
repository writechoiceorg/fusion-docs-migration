{
  "type": "object",
  "title": "Hybrid Query",
  "description": "Hybrid of Vector and Lexical Search. Will be skipped if query string is blank or wildcard (* or *:*).  Note this will not work well if the incoming q parameter is a Solr query parser string (e.g. field_t:foo) rather than a raw user query string.  Note: The resulting query will ALWAYS be written to <request.params.q>.  This stage is deprecated and will be removed in a future release.  Please use the 'Neural Hybrid Search' stage instead.",
  "required": [
    "lexicalQuery",
    "lexicalWeight",
    "lexicalDepth",
    "vectorQueryField",
    "vector",
    "vectorWeight"
  ],
  "properties": {
    "skip": {
      "type": "boolean",
      "title": "Skip This Stage",
      "description": "Set to true to skip this stage.",
      "default": false,
      "hints": [
        "advanced"
      ]
    },
    "label": {
      "type": "string",
      "title": "Label",
      "description": "A unique label for this stage.",
      "hints": [
        "advanced"
      ],
      "maxLength": 255
    },
    "condition": {
      "type": "string",
      "title": "Condition",
      "description": "Define a conditional script that must result in true or false. This can be used to determine if the stage should process or not.",
      "hints": [
        "code",
        "code/javascript",
        "advanced"
      ]
    },
    "legacy": {
      "type": "boolean",
      "title": "Legacy",
      "description": "True if this stage only supports legacy mode",
      "hints": [
        "readonly",
        "hidden"
      ]
    },
    "lexicalQuery": {
      "type": "string",
      "title": "Lexical Query Input",
      "description": "The lexical query itself is retrieved from here.  This field supports Template Expressions such as '<request.params.q>' to evaluate the original user query.",
      "default": "<request.params.q>"
    },
    "lexicalWeight": {
      "type": "number",
      "title": "Lexical Query Weight",
      "description": "Relative weight of the lexical query. If this value is 0, no re-ranking will be applied using the lexical query scores.",
      "default": 0.3,
      "maximum": 10.0,
      "exclusiveMaximum": false
    },
    "lexicalDepth": {
      "type": "integer",
      "title": "Number of Lexical Results",
      "description": "The number of lexical search results to include in re-ranking.  This value is ignored if \"Lexical Query Weight\" is 0.",
      "default": 1000
    },
    "vectorQueryField": {
      "type": "string",
      "title": "Vector Query Field",
      "description": "The name of the Solr field for knn vector search."
    },
    "vector": {
      "type": "string",
      "title": "Vector Input",
      "description": "The Vector itself is retrieved from here.  This field supports Template Expressions such as '<ctx.vector>' to evaluate the context variable resulting from a previous stage, such as the Vectorize Query via Lucidworks AI stage.",
      "default": "<ctx.vector>"
    },
    "vectorWeight": {
      "type": "number",
      "title": "Vector Query Weight",
      "description": "Relative weight of the vector query.",
      "default": 0.7,
      "maximum": 10.0,
      "exclusiveMaximum": false,
      "minimum": 0.001,
      "exclusiveMinimum": false
    },
    "knn": {
      "type": "object",
      "title": "Use KNN Query",
      "description": "Select this option if you wish to use the 'knn' query parser and configure its options. This option may not be selected if 'Use VecSim Query' is selected. Using 'knn' is the default if neither option is selected",
      "required": [
        "vectorDepth"
      ],
      "properties": {
        "vectorDepth": {
          "type": "integer",
          "title": "Number of Vector Results",
          "description": "The number of vector search results to include in re-ranking.  Also known as topK.",
          "default": 1000
        }
      }
    },
    "vecSim": {
      "type": "object",
      "title": "Use VecSim Query",
      "description": "Select this option if you wish to use the 'vecSim' query parser and configure its options. This option may not be selected if 'Use KNN Query' is selected. Using 'knn' is the default if neither option is selected",
      "required": [
        "minReturnSim",
        "minTraverseSim"
      ],
      "properties": {
        "minReturnSim": {
          "type": "number",
          "title": "Min Return Vector Similarity",
          "description": "The minimum vector similarity value to qualify as a match from the Vector portion of the hybrid query.",
          "default": 0.85,
          "maximum": 1.0,
          "exclusiveMaximum": false
        },
        "minTraverseSim": {
          "type": "number",
          "title": "Min Traversal Vector Similarity",
          "description": "The minimum vector similarity value to use when walking the graph during the Vector portion of the hybrid query. Must be lower than, or equal to, the Min Return Vector Similarity",
          "default": 0.5,
          "maximum": 1.0,
          "exclusiveMaximum": false
        }
      }
    },
    "minSimFilter": {
      "type": "number",
      "title": "Minimum Vector Similarity Filter",
      "description": "Select this option if you wish to apply a minimum similarity threshold for filtering documents. This option will apply to all documents, regardless of other score boosting such as rules or signals.",
      "maximum": 1.0,
      "exclusiveMaximum": false
    }
  },
  "category": "AI",
  "categoryPriority": 10,
  "unsafe": false
}
